#include "CollisionManager.h"
#include "Enemy.h"
#include "Player.h"

CollisionManager::CollisionManager(btDynamicsWorld* world): dynamicsWorld(world) {}

void CollisionManager::detectCollisions() {

    // Perform collision detection with Bullet's built-in method
    dynamicsWorld->performDiscreteCollisionDetection();

    // Loop through contacts generated by Bullet's collision world
    int numManifolds = dynamicsWorld->getDispatcher()->getNumManifolds();
    for (int i = 0; i < numManifolds; ++i) {
        btPersistentManifold* contactManifold = dynamicsWorld->getDispatcher()->getManifoldByIndexInternal(i);

        btRigidBody* body0 = const_cast<btRigidBody*>(static_cast<const btRigidBody*>(contactManifold->getBody0()));
        btRigidBody* body1 = const_cast<btRigidBody*>(static_cast<const btRigidBody*>(contactManifold->getBody1()));

        // Get the objects involved in the collision
        CharacterInterface* obj1 = static_cast<CharacterInterface*>(body0->getUserPointer());
        CharacterInterface* obj2 = static_cast<CharacterInterface*>(body1->getUserPointer());

        CollisionEvent event = { obj1, obj2 };

        // Collect all contact points (where the collision occurred)
        for (int j = 0; j < contactManifold->getNumContacts(); ++j) {
            btManifoldPoint& pt = contactManifold->getContactPoint(j);
            event.contactPoints.push_back(pt);
        }

        // Dispatch the event (send collision data to subscribers)
        dispatch(event);
    }
}

void CollisionManager::dispatch(const CollisionEvent& event) {
    if (event.obj1) event.obj1->onCollision(event);
    if (event.obj2) event.obj2->onCollision(event);
}
